{"version":3,"sources":["AvroConverter/AvroConverter.js","App.js","serviceWorker.js","index.js"],"names":["AvroConverter","re","nowInstant","Instant","now","truncatedTo","ChronoUnit","MILLIS","toEpochMilli","nowDateTime","LocalDate","toEpochDay","styleAlert","display","padding","width","textAlign","margin","inline","styleTextArea","useState","epoch","setEpoch","millis","setMillis","Row","className","Col","style","md","value","onChange","event","target","test","bind","Alert","variant","ofEpochDay","parseInt","toString","err","console","log","Button","onClick","ofEpochMilli","App","Container","fluid","Navbar","expand","bg","Brand","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAsFeA,EAlFO,WAElB,IAAMC,EAAK,aACLC,EAAa,kBAAMC,IAAQC,MAAMC,YAAYC,IAAWC,QAAQC,gBAChEC,EAAc,kBAAMC,IAAUN,MAAMO,cAEpCC,EAAa,CACfC,QAAS,eACTC,QAAS,MACTC,MAAO,QACPC,UAAW,SACXC,OAAQ,OAGNC,EAAS,CACXL,QAAS,eACTI,OAAQ,OAGNE,EAAgB,CAClBN,QAAS,eACTE,MAAO,SArBa,EAqDEK,mBAASX,KArDX,mBAqDjBY,EArDiB,KAqDVC,EArDU,OAsDIF,mBAASlB,KAtDb,mBAsDjBqB,EAtDiB,KAsDTC,EAtDS,KAwDxB,OACI,kBAAC,WAAD,KACG,kBAACC,EAAA,EAAD,CAAKC,UAAU,oCACX,kBAACC,EAAA,EAAD,CAAKC,MAAOT,EAAeU,GAAG,QAC3B,2BAAOD,MAAOV,EAAQY,MAAOT,EAAOU,SAnBlC,SAACC,IACc,KAAvBA,EAAMC,OAAOH,OAAgB7B,EAAGiC,KAAKF,EAAMC,OAAOH,SAClDR,EAASU,EAAMC,OAAOH,QAiBsCK,U,KADzD,mCAIC,kBAACR,EAAA,EAAD,KAvCO,WACf,IACI,OAAO,kBAACS,EAAA,EAAD,CAAOR,MAAOhB,EAAYyB,QAAQ,WAAW3B,IAAU4B,WAAWC,SAASlB,IAAQmB,YAC5F,MAAMC,GAEJ,OADAC,QAAQC,IAAIF,GACL,kBAACL,EAAA,EAAD,CAAOR,MAAOhB,EAAYyB,QAAQ,UAAlC,aAAsDhB,EAAtD,eAmCAiB,GACD,kBAACM,EAAA,EAAD,CAAQhB,MAAOV,EAAQmB,QAAQ,UAAUQ,QAAS,kBAAMvB,EAASb,OAAjE,WAGP,kBAACgB,EAAA,EAAD,CAAKC,UAAU,oCACX,kBAACC,EAAA,EAAD,CAAKC,MAAOT,EAAeU,GAAG,QAC3B,2BAAOD,MAAOV,EAAQY,MAAOP,EAAQQ,SAvB/B,SAACC,IACU,KAAvBA,EAAMC,OAAOH,OAAgB7B,EAAGiC,KAAKF,EAAMC,OAAOH,SAClDN,EAAUQ,EAAMC,OAAOH,QAqB0CK,U,KAD9D,2CAIC,kBAACR,EAAA,EAAD,KAxCS,WACjB,IACI,OAAO,kBAACS,EAAA,EAAD,CAAOR,MAAOhB,EAAYyB,QAAQ,WAAWlC,IAAQ2C,aAAaP,SAAShB,IAASiB,YAC7F,MAAMC,GACJ,OAAO,kBAACL,EAAA,EAAD,CAAOR,MAAOhB,EAAYyB,QAAQ,UAAlC,gBAAyDd,EAAzD,eAqCCuB,GACF,kBAACF,EAAA,EAAD,CAAQhB,MAAOV,EAAQmB,QAAQ,UAAUQ,QAAS,kBAAMrB,EAAUtB,OAAlE,a,wBC/DH6C,EAXH,WACV,OACE,kBAACC,EAAA,EAAD,CAAWC,MAAM,MACf,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKd,QAAQ,QAAQe,GAAG,SACrC,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,6CAEF,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.e00441db.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\nimport {LocalDate, Instant, ChronoUnit} from '@js-joda/core';\nimport {Alert, Button, Row, Col} from 'react-bootstrap';\n\nconst AvroConverter = () => {\n\n    const re = /^[0-9\\b]+$/;\n    const nowInstant = () => Instant.now().truncatedTo(ChronoUnit.MILLIS).toEpochMilli();\n    const nowDateTime = () => LocalDate.now().toEpochDay();\n\n    const styleAlert = {\n        display: 'inline-block',\n        padding: '5px',\n        width: '250px',\n        textAlign: 'center',\n        margin: '5px',\n    };\n\n    const inline = {\n        display: 'inline-block',\n        margin: '5px',\n    };\n\n    const styleTextArea = {\n        display: 'inline-block',\n        width: '500px',\n    };\n\n    const ofEpochDay = () => {\n        try {\n            return <Alert style={styleAlert} variant='success'>{LocalDate.ofEpochDay(parseInt(epoch)).toString()}</Alert>;\n        } catch(err) {\n            console.log(err)\n            return <Alert style={styleAlert} variant='danger'>Epoch day {epoch} not valid</Alert>;\n        }\n    }\n\n    const ofEpochMilli = () => {\n        try {\n            return <Alert style={styleAlert} variant='success'>{Instant.ofEpochMilli(parseInt(millis)).toString()}</Alert>;\n        } catch(err) {\n            return <Alert style={styleAlert} variant='danger'>Epoch millis {millis} not valid</Alert>;\n        }\n    }\n\n    const setDate = (event) => {\n        if (event.target.value === '' || re.test(event.target.value)) {\n            setEpoch(event.target.value);\n        }\n    }\n\n    const setDateTime = (event) => {\n        if (event.target.value === '' || re.test(event.target.value)) {\n            setMillis(event.target.value);\n        }\n    }\n\n    const [epoch, setEpoch] = useState(nowDateTime());\n    const [millis, setMillis] = useState(nowInstant());\n\n    return (\n        <Fragment>\n           <Row className=\"justify-content-md-center border\">\n               <Col style={styleTextArea} md=\"auto\">\n                  <input style={inline} value={epoch} onChange={setDate.bind(this)} />\n                  epoch day is converted to date: \n                </Col>\n                <Col>  \n                  {ofEpochDay()}\n                  <Button style={inline} variant=\"warning\" onClick={() => setEpoch(nowDateTime())}>Reset</Button>\n                </Col>\n           </Row>\n           <Row className=\"justify-content-md-center border\">\n               <Col style={styleTextArea} md=\"auto\">\n                  <input style={inline} value={millis} onChange={setDateTime.bind(this)}/>\n                  epoch millis is converted to date-time:\n                </Col>\n                <Col>\n                   {ofEpochMilli()}\n                  <Button style={inline} variant=\"warning\" onClick={() => setMillis(nowInstant())}>Reset</Button>\n                </Col>\n           </Row>\n        </Fragment>\n      );\n}\n\nexport default AvroConverter;","import React from 'react';\nimport AvroConverter from './AvroConverter/AvroConverter.js'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container, Navbar } from 'react-bootstrap';\n\nconst App = () => {\n  return (\n    <Container fluid=\"md\">\n      <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\n        <Navbar.Brand href=\"#\">Java 8/Avro Joda Date/DateTime converter</Navbar.Brand>\n      </Navbar>\n      <AvroConverter />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}